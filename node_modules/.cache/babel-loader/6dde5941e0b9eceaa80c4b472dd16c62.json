{"ast":null,"code":"var _jsxFileName = \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Tables/itineraryTable/itineraryRow.js\";\nimport React from 'react';\nimport '../../components.css';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { getItineraries, addItinerary, itineraryAdded, deleteItinerary, selectItinerary, selectItineraryChanging, editItinerary, itineraryChanged } from '../../../Action/itineraryAction';\nimport withAuthorization from '../../Session/withAuthorization';\nimport ActivityTable from \"./activityTable\";\n\nclass ItineraryRow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: {},\n      show: false,\n      listShow: false,\n      showList: \"\",\n      tourGuides: [],\n      leadChaperones: [],\n      radioSelected: \"\",\n      targetList: [],\n      avaliableTourGuides: [],\n      avaliableLeadChaperones: [],\n      assignedTourGuide: {},\n      assignedLeadChaperone: {}\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.selectItineraryChanged) {\n      this.props.selectItineraryChanging();\n      this.props.history.push('/itinerary/' + this.props.id);\n    }\n  }\n\n  selected(id, index) {\n    this.props.selectItinerary(id, index);\n  }\n\n  handleDelete(date) {\n    let selectedItinerary = this.props.itineraries.find(itinerary => {\n      return itinerary.id == this.props.id;\n    });\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let year = date.getFullYear();\n    let index;\n\n    for (let i = 0; i < selectedItinerary.dailyData.length; i++) {\n      let currentDate = new Date(selectedItinerary.dailyData[i].date.seconds * 1000);\n      let currentMonth = currentDate.getMonth() + 1;\n      let currentDay = currentDate.getDate();\n      let currentYear = currentDate.getFullYear();\n\n      if (month === currentMonth && day === currentDay && year === currentYear) {\n        index = i;\n        i = selectedItinerary.dailyData.length;\n      }\n    }\n\n    selectedItinerary.dailyData.splice(index, 1);\n    let newDailyData = selectedItinerary.dailyData;\n    this.props.deleteItinerary(newDailyData, this.props.id);\n  }\n\n  render() {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.props.groupName)))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.props.date), React.createElement(\"td\", {\n      className: \"scheduleBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(ActivityTable, {\n      activities: this.props.activities,\n      id: this.props.id,\n      index: this.props.index,\n      length: this.props.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"edit_button\",\n      onClick: () => this.selected(this.props.id, this.props.index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"delete_button\",\n      id: this.props.id,\n      onClick: () => {\n        if (window.confirm('Are you sure you wish to delete this Group?')) this.handleDelete(this.props.scheduleDate);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Delete\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  itineraries: state.itineraryState.itineraries,\n  selectedItinerary: state.itineraryState.selectedItinerary,\n  selectItineraryChanged: state.itineraryState.selectItineraryChanged,\n  itineraryHead: state.itineraryState.itineraryHead\n});\n\nconst condition = authUser => !!authUser;\n\nexport default compose(connect(mapStateToProps, {\n  getItineraries,\n  addItinerary,\n  itineraryAdded,\n  deleteItinerary,\n  selectItinerary,\n  selectItineraryChanging,\n  editItinerary,\n  itineraryChanged\n}), withAuthorization(condition))(ItineraryRow);","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Tables/itineraryTable/itineraryRow.js"],"names":["React","connect","compose","getItineraries","addItinerary","itineraryAdded","deleteItinerary","selectItinerary","selectItineraryChanging","editItinerary","itineraryChanged","withAuthorization","ActivityTable","ItineraryRow","PureComponent","constructor","props","state","selected","show","listShow","showList","tourGuides","leadChaperones","radioSelected","targetList","avaliableTourGuides","avaliableLeadChaperones","assignedTourGuide","assignedLeadChaperone","componentDidUpdate","selectItineraryChanged","history","push","id","index","handleDelete","date","selectedItinerary","itineraries","find","itinerary","month","getMonth","day","getDate","year","getFullYear","i","dailyData","length","currentDate","Date","seconds","currentMonth","currentDay","currentYear","splice","newDailyData","render","groupName","activities","window","confirm","scheduleDate","mapStateToProps","itineraryState","itineraryHead","condition","authUser"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../components.css';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport {getItineraries, addItinerary, itineraryAdded, deleteItinerary, selectItinerary, selectItineraryChanging, editItinerary, itineraryChanged} from '../../../Action/itineraryAction'\nimport withAuthorization from '../../Session/withAuthorization';\nimport ActivityTable from \"./activityTable\";\nclass ItineraryRow extends React.PureComponent{\n    constructor(props){\n        super(props);\n        this.state={\n            selected : {}, \n            show:false,\n            listShow:false,\n            showList: \"\",\n            tourGuides:[],\n            leadChaperones:[],\n            radioSelected: \"\",\n            targetList:[],\n            avaliableTourGuides:[],\n            avaliableLeadChaperones:[],\n            assignedTourGuide:{},\n            assignedLeadChaperone:{}\n        }\n    }\n    componentDidUpdate(){\n        if(this.props.selectItineraryChanged){\n            this.props.selectItineraryChanging()\n            this.props.history.push('/itinerary/'+this.props.id);  \n        } \n    }\n    selected(id, index){\n        this.props.selectItinerary(id, index);\n    }\n    handleDelete(date){\n        let selectedItinerary = this.props.itineraries.find(itinerary =>{\n            return itinerary.id == this.props.id \n        })\n        let month = date.getMonth()+1;\n        let day= date.getDate();\n        let year =date.getFullYear();\n        let index;\n        for(let i=0; i< selectedItinerary.dailyData.length;i++){\n            let currentDate = new Date(selectedItinerary.dailyData[i].date.seconds*1000)\n            let currentMonth = currentDate.getMonth()+1;\n            let currentDay = currentDate.getDate();\n            let currentYear = currentDate.getFullYear();\n            if(month===currentMonth && day===currentDay && year===currentYear){\n                index = i\n                i=selectedItinerary.dailyData.length\n            }\n        }\n        selectedItinerary.dailyData.splice(index,1)\n        let newDailyData= selectedItinerary.dailyData\n        this.props.deleteItinerary(newDailyData, this.props.id)\n    }\n    render(){\n        return(\n            <tr>\n                <td><center><h2><b>{this.props.groupName}</b></h2></center></td>\n                <td>{this.props.date}</td>\n                <td className=\"scheduleBox\">{<ActivityTable activities={this.props.activities} id={this.props.id} index={this.props.index} length={this.props.length}/>}\n                </td>\n                <td>\n                <center><button className=\"edit_button\" onClick={()=>this.selected(this.props.id, this.props.index)}>Edit</button><br/></center>\n                <center><button className=\"delete_button\" id={this.props.id} onClick={() => { if (window.confirm('Are you sure you wish to delete this Group?')) this.handleDelete(this.props.scheduleDate)}}>Delete</button></center>\n                </td>\n            </tr>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    itineraries: state.itineraryState.itineraries,\n    selectedItinerary : state.itineraryState.selectedItinerary,\n    selectItineraryChanged: state.itineraryState.selectItineraryChanged,\n    itineraryHead: state.itineraryState.itineraryHead\n});\nconst condition = authUser => !!authUser;\nexport default compose(\n    connect(\n      mapStateToProps,\n      {getItineraries, addItinerary, itineraryAdded, deleteItinerary, selectItinerary, selectItineraryChanging, editItinerary, itineraryChanged}\n    ),withAuthorization(condition)\n)(ItineraryRow);"]},"metadata":{},"sourceType":"module"}