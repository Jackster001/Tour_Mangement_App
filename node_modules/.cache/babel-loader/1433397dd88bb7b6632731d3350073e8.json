{"ast":null,"code":"var _jsxFileName = \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Session/withAuthorization.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport * as ROUTES from '../../constants/routes';\nimport { connect } from 'react-redux';\nimport { auth } from '../Firebase';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = auth.onAuthStateChanged(authUser => {\n        if (!condition(authUser)) {\n          this.props.history.push(ROUTES.LOGIN);\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return condition(this.props.authUser == true) ? React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })) : null;\n    }\n\n  }\n\n  const mapStateToProps = state => ({\n    authUser: state.sessionState.authUser\n  });\n\n  return compose(withRouter, connect(mapStateToProps))(WithAuthorization);\n};\n\nexport default withAuthorization;","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Session/withAuthorization.js"],"names":["React","withRouter","compose","ROUTES","connect","auth","withAuthorization","condition","Component","WithAuthorization","componentDidMount","listener","onAuthStateChanged","authUser","props","history","push","LOGIN","componentWillUnmount","render","mapStateToProps","state","sessionState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,IAAR,QAAmB,aAAnB;;AACA,MAAMC,iBAAiB,GAAGC,SAAS,IAAIC,SAAS,IAAI;AAClD,QAAMC,iBAAN,SAAgCT,KAAK,CAACQ,SAAtC,CAAgD;AAC9CE,IAAAA,iBAAiB,GAAG;AACpB,WAAKC,QAAL,GAAgBN,IAAI,CAACO,kBAAL,CACZC,QAAQ,IAAI;AACV,YAAI,CAACN,SAAS,CAACM,QAAD,CAAd,EAA0B;AACxB,eAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwBb,MAAM,CAACc,KAA/B;AACD;AACF,OALW,CAAhB;AAOC;;AACDC,IAAAA,oBAAoB,GAAG;AACrB,WAAKP,QAAL;AACD;;AAEDQ,IAAAA,MAAM,GAAG;AACP,aAAOZ,SAAS,CAAC,KAAKO,KAAL,CAAWD,QAAX,IAAqB,IAAtB,CAAT,GACL,oBAAC,SAAD,oBAAe,KAAKC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADK,GAEH,IAFJ;AAGD;;AAlB6C;;AAoBhD,QAAMM,eAAe,GAAGC,KAAK,KAAK;AAChCR,IAAAA,QAAQ,EAAEQ,KAAK,CAACC,YAAN,CAAmBT;AADG,GAAL,CAA7B;;AAGA,SAAOX,OAAO,CACZD,UADY,EAEZG,OAAO,CAACgB,eAAD,CAFK,CAAP,CAGLX,iBAHK,CAAP;AAID,CA5BD;;AA6BA,eAAeH,iBAAf","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport * as ROUTES from '../../constants/routes';\nimport { connect } from 'react-redux';\nimport {auth} from '../Firebase'\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n    this.listener = auth.onAuthStateChanged(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.LOGIN);\n          }\n        },\n      );\n    }\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return condition(this.props.authUser==true) ? (\n        <Component {...this.props} />\n      ) : null;\n    }\n  }\n  const mapStateToProps = state => ({\n    authUser: state.sessionState.authUser,\n  });\n  return compose(\n    withRouter,\n    connect(mapStateToProps),\n  )(WithAuthorization);\n};\nexport default withAuthorization;"]},"metadata":{},"sourceType":"module"}