{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst INITIAL_STATE = {// notifications: [{}],\n  // notificationsGetting: false,\n  // notificationSending: false,\n  // selectedNotification: {},\n  // selectNotificationChanged: false,\n  // notificationChanging: false\n};\n\nfunction notificationReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'NOTIFICATIONS_GET':\n      {\n        return _objectSpread({}, state, {\n          notifications: action.payload,\n          notificationsGetting: true\n        });\n      }\n\n    case \"NOTIFICATIONS_GETTING\":\n      {\n        return _objectSpread({}, state, {\n          notificationsGetting: false\n        });\n      }\n\n    case 'NOTIFICATION_SEND':\n      {\n        return _objectSpread({}, state, {\n          notifications: [action.payload, ...state.notifications],\n          notificationSending: true\n        });\n      }\n\n    case 'NOTIFICATION_SENT':\n      {\n        return _objectSpread({}, state, {\n          notificationSending: false\n        });\n      }\n\n    case 'NOTIFICATION_SELECT':\n      {\n        return _objectSpread({}, state, {\n          selectedNotification: action.payload,\n          selectNotificationChanged: true\n        });\n      }\n\n    case 'NOTIFICATION_SELECT_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          selectNotificationChanged: false\n        });\n      }\n\n    case 'EDIT_NOTIFICATION':\n      {\n        const index = state.notifications.findIndex(notification => {\n          return notification.id == state.selectedNotification.id;\n        });\n        const newNotificationSet = state.notifications;\n        newNotificationSet[index] = action.payload;\n        console.log(newNotificationSet);\n        return _objectSpread({}, state, {\n          notifications: newNotificationSet,\n          notificationChanging: true\n        });\n      }\n\n    case 'NOTIFICATION_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          notificationChanging: false\n        });\n      }\n\n    case \"NOTIFICATION_DELETE\":\n      {\n        const newNotifications = Object.assign([], _objectSpread({}, state.notifications));\n        const index = state.notifications.findIndex(notification => {\n          return notification.id == action.id;\n        });\n        newNotifications.splice(index, 1);\n        return _objectSpread({}, state, {\n          notifications: newNotifications,\n          notificationDeleting: true\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default notificationReducer;","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/reducers/notifications.js"],"names":["INITIAL_STATE","notificationReducer","state","action","type","notifications","payload","notificationsGetting","notificationSending","selectedNotification","selectNotificationChanged","index","findIndex","notification","id","newNotificationSet","console","log","notificationChanging","newNotifications","Object","assign","splice","notificationDeleting"],"mappings":";AAAA,MAAMA,aAAa,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AANkB,CAAtB;;AAQA,SAASC,mBAAT,CAA6BC,KAAK,GAAGF,aAArC,EAAoDG,MAApD,EAA4D;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AAA0B;AACxB,iCAAWF,KAAX;AAAkBG,UAAAA,aAAa,EAAEF,MAAM,CAACG,OAAxC;AAAiDC,UAAAA,oBAAoB,EAAE;AAAvE;AACD;;AACD,SAAK,uBAAL;AAA6B;AAC3B,iCAAWL,KAAX;AAAkBK,UAAAA,oBAAoB,EAAE;AAAxC;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,iCAAWL,KAAX;AAAkBG,UAAAA,aAAa,EAAE,CAACF,MAAM,CAACG,OAAR,EAAgB,GAAGJ,KAAK,CAACG,aAAzB,CAAjC;AAA0EG,UAAAA,mBAAmB,EAAE;AAA/F;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,iCAAWN,KAAX;AAAkBM,UAAAA,mBAAmB,EAAE;AAAvC;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,iCAAWN,KAAX;AAAkBO,UAAAA,oBAAoB,EAAEN,MAAM,CAACG,OAA/C;AAAwDI,UAAAA,yBAAyB,EAAE;AAAnF;AACD;;AACD,SAAK,6BAAL;AAAmC;AACjC,iCAAWR,KAAX;AAAkBQ,UAAAA,yBAAyB,EAAE;AAA7C;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAMC,KAAK,GAAET,KAAK,CAACG,aAAN,CAAoBO,SAApB,CAA8BC,YAAY,IAAI;AAAC,iBAAOA,YAAY,CAACC,EAAb,IAAmBZ,KAAK,CAACO,oBAAN,CAA2BK,EAArD;AAAwD,SAAvG,CAAb;AACA,cAAMC,kBAAkB,GAAGb,KAAK,CAACG,aAAjC;AACAU,QAAAA,kBAAkB,CAACJ,KAAD,CAAlB,GAA2BR,MAAM,CAACG,OAAlC;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACA,iCAAWb,KAAX;AAAkBG,UAAAA,aAAa,EAAEU,kBAAjC;AAAqDG,UAAAA,oBAAoB,EAAC;AAA1E;AACD;;AACD,SAAK,sBAAL;AAA4B;AAC1B,iCAAUhB,KAAV;AAAiBgB,UAAAA,oBAAoB,EAAC;AAAtC;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,cAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAqBnB,KAAK,CAACG,aAA3B,EAAzB;AACA,cAAMM,KAAK,GAAET,KAAK,CAACG,aAAN,CAAoBO,SAApB,CAA8BC,YAAY,IAAI;AAAC,iBAAOA,YAAY,CAACC,EAAb,IAAmBX,MAAM,CAACW,EAAjC;AAAoC,SAAnF,CAAb;AACAK,QAAAA,gBAAgB,CAACG,MAAjB,CAAwBX,KAAxB,EAA+B,CAA/B;AACA,iCAAWT,KAAX;AAAkBG,UAAAA,aAAa,EAAEc,gBAAjC;AAAmDI,UAAAA,oBAAoB,EAAE;AAAzE;AACD;;AACD;AACE,aAAOrB,KAAP;AApCJ;AAsCD;;AAEH,eAAeD,mBAAf","sourcesContent":["const INITIAL_STATE = {\n    // notifications: [{}],\n    // notificationsGetting: false,\n    // notificationSending: false,\n    // selectedNotification: {},\n    // selectNotificationChanged: false,\n    // notificationChanging: false\n};\nfunction notificationReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n      case 'NOTIFICATIONS_GET': {\n        return {...state, notifications: action.payload, notificationsGetting: true};\n      }\n      case \"NOTIFICATIONS_GETTING\":{\n        return {...state, notificationsGetting: false}\n      }\n      case 'NOTIFICATION_SEND': {\n        return {...state, notifications: [action.payload,...state.notifications], notificationSending: true};\n      }\n      case 'NOTIFICATION_SENT': {\n        return {...state, notificationSending: false}\n      }\n      case 'NOTIFICATION_SELECT': {\n        return {...state, selectedNotification: action.payload, selectNotificationChanged: true};\n      }\n      case 'NOTIFICATION_SELECT_CHANGED':{\n        return {...state, selectNotificationChanged: false}\n      }\n      case 'EDIT_NOTIFICATION': {\n        const index= state.notifications.findIndex(notification => {return notification.id == state.selectedNotification.id})\n        const newNotificationSet = state.notifications;\n        newNotificationSet[index]= action.payload;\n        console.log(newNotificationSet);\n        return {...state, notifications: newNotificationSet, notificationChanging:true};\n      }\n      case 'NOTIFICATION_CHANGED':{\n        return{...state, notificationChanging:false}\n      }\n      case \"NOTIFICATION_DELETE\": {\n        const newNotifications = Object.assign([],{...state.notifications});\n        const index= state.notifications.findIndex(notification => {return notification.id == action.id})\n        newNotifications.splice(index, 1)\n        return {...state, notifications: newNotifications, notificationDeleting: true};\n      }\n      default:\n        return state;\n    }\n  }\n  \nexport default notificationReducer;"]},"metadata":{},"sourceType":"module"}