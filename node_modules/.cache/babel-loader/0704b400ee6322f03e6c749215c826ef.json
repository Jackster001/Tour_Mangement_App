{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst INITIAL_STATE = {\n  itineraries: [{}],\n  itinerariesGetting: false,\n  itineraryAdding: false,\n  selectedItinerary: {},\n  selectItinerariesChanged: false,\n  itinerariesChanging: false,\n  itineraryHead: {}\n};\n\nfunction itineraryReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'ITINERARIES_GET':\n      {\n        return _objectSpread({}, state, {\n          itineraries: action.payload,\n          itinerariesGetting: true\n        });\n      }\n\n    case \"ITINERARIES_GETTING\":\n      {\n        return _objectSpread({}, state, {\n          itinerariesGetting: false\n        });\n      }\n\n    case 'ITINERARY_ADD':\n      {\n        return _objectSpread({}, state, {\n          itineraries: [action.payload, ...state.itineraries],\n          itineraryAdding: true\n        });\n      }\n\n    case 'ITINERARY_ADDED':\n      {\n        return _objectSpread({}, state, {\n          itineraryAdding: false\n        });\n      }\n\n    case 'ITINERARY_SELECT':\n      {\n        return _objectSpread({}, state, {\n          selectedItinerary: _objectSpread({}, action.payload),\n          itineraryHead: action.itineraryHead,\n          selectItineraryChanged: true\n        });\n      }\n\n    case 'ITINERARY_SELECT_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          selectItineraryChanged: false\n        });\n      }\n\n    case 'EDIT_ITINERARY':\n      {\n        const index = state.itineraries.findIndex(contact => {\n          return contact.id == state.selectedItinerary.id;\n        });\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index] = action.payload;\n        return _objectSpread({}, state, {\n          itineraries: newItinerarySet,\n          itineraryChanging: true\n        });\n      }\n\n    case 'ITINERARY_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          itineraryChanging: false\n        });\n      }\n\n    case \"ITINERARY_DELETE\":\n      {\n        const newItineraries = Object.assign([], _objectSpread({}, state.itineraries));\n        const index = state.itineraries.findIndex(itinerary => {\n          return itinerary.id == action.id;\n        });\n        newItineraries.splice(index, 1);\n        return _objectSpread({}, state, {\n          itineraries: newItineraries\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default itineraryReducer;","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/reducers/itinerary.js"],"names":["INITIAL_STATE","itineraries","itinerariesGetting","itineraryAdding","selectedItinerary","selectItinerariesChanged","itinerariesChanging","itineraryHead","itineraryReducer","state","action","type","payload","selectItineraryChanged","index","findIndex","contact","id","newItinerarySet","itineraryChanging","newItineraries","Object","assign","itinerary","splice"],"mappings":";AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,WAAW,EAAE,CAAC,EAAD,CADK;AAElBC,EAAAA,kBAAkB,EAAE,KAFF;AAGlBC,EAAAA,eAAe,EAAE,KAHC;AAIlBC,EAAAA,iBAAiB,EAAE,EAJD;AAKlBC,EAAAA,wBAAwB,EAAE,KALR;AAMlBC,EAAAA,mBAAmB,EAAE,KANH;AAOlBC,EAAAA,aAAa,EAAC;AAPI,CAAtB;;AASA,SAASC,gBAAT,CAA0BC,KAAK,GAAGT,aAAlC,EAAiDU,MAAjD,EAAyD;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AAAwB;AACtB,iCAAWF,KAAX;AAAkBR,UAAAA,WAAW,EAAES,MAAM,CAACE,OAAtC;AAA+CV,UAAAA,kBAAkB,EAAE;AAAnE;AACD;;AACD,SAAK,qBAAL;AAA2B;AACzB,iCAAWO,KAAX;AAAkBP,UAAAA,kBAAkB,EAAE;AAAtC;AACD;;AACD,SAAK,eAAL;AAAsB;AACpB,iCAAWO,KAAX;AAAkBR,UAAAA,WAAW,EAAE,CAACS,MAAM,CAACE,OAAR,EAAgB,GAAGH,KAAK,CAACR,WAAzB,CAA/B;AAAsEE,UAAAA,eAAe,EAAE;AAAvF;AACD;;AACD,SAAK,iBAAL;AAAwB;AACtB,iCAAWM,KAAX;AAAkBN,UAAAA,eAAe,EAAE;AAAnC;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,iCAAWM,KAAX;AAAkBL,UAAAA,iBAAiB,oBAAMM,MAAM,CAACE,OAAb,CAAnC;AAA0DL,UAAAA,aAAa,EAAEG,MAAM,CAACH,aAAhF;AAA+FM,UAAAA,sBAAsB,EAAE;AAAvH;AACD;;AACD,SAAK,0BAAL;AAAgC;AAC9B,iCAAWJ,KAAX;AAAkBI,UAAAA,sBAAsB,EAAE;AAA1C;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,cAAMC,KAAK,GAAEL,KAAK,CAACR,WAAN,CAAkBc,SAAlB,CAA4BC,OAAO,IAAI;AAAC,iBAAOA,OAAO,CAACC,EAAR,IAAcR,KAAK,CAACL,iBAAN,CAAwBa,EAA7C;AAAgD,SAAxF,CAAb;AACA,cAAMC,eAAe,GAAGT,KAAK,CAACR,WAA9B;AACAiB,QAAAA,eAAe,CAACJ,KAAD,CAAf,GAAwBJ,MAAM,CAACE,OAA/B;AACA,iCAAWH,KAAX;AAAkBR,UAAAA,WAAW,EAAEiB,eAA/B;AAAgDC,UAAAA,iBAAiB,EAAC;AAAlE;AACD;;AACD,SAAK,mBAAL;AAAyB;AACvB,iCAAUV,KAAV;AAAiBU,UAAAA,iBAAiB,EAAC;AAAnC;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,cAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAqBb,KAAK,CAACR,WAA3B,EAAvB;AACA,cAAMa,KAAK,GAAEL,KAAK,CAACR,WAAN,CAAkBc,SAAlB,CAA4BQ,SAAS,IAAI;AAAC,iBAAOA,SAAS,CAACN,EAAV,IAAgBP,MAAM,CAACO,EAA9B;AAAiC,SAA3E,CAAb;AACAG,QAAAA,cAAc,CAACI,MAAf,CAAsBV,KAAtB,EAA6B,CAA7B;AACA,iCAAWL,KAAX;AAAkBR,UAAAA,WAAW,EAAEmB;AAA/B;AACD;;AACD;AACE,aAAOX,KAAP;AAnCJ;AAqCD;;AAEH,eAAeD,gBAAf","sourcesContent":["const INITIAL_STATE = {\n    itineraries: [{}],\n    itinerariesGetting: false,\n    itineraryAdding: false,\n    selectedItinerary: {},\n    selectItinerariesChanged: false,\n    itinerariesChanging: false,\n    itineraryHead:{}\n};\nfunction itineraryReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n      case 'ITINERARIES_GET': {\n        return {...state, itineraries: action.payload, itinerariesGetting: true};\n      }\n      case \"ITINERARIES_GETTING\":{\n        return {...state, itinerariesGetting: false}\n      }\n      case 'ITINERARY_ADD': {\n        return {...state, itineraries: [action.payload,...state.itineraries], itineraryAdding: true};\n      }\n      case 'ITINERARY_ADDED': {\n        return {...state, itineraryAdding: false}\n      }\n      case 'ITINERARY_SELECT': {\n        return {...state, selectedItinerary: {...action.payload}, itineraryHead: action.itineraryHead, selectItineraryChanged: true};\n      }\n      case 'ITINERARY_SELECT_CHANGED':{\n        return {...state, selectItineraryChanged: false}\n      }\n      case 'EDIT_ITINERARY': {\n        const index= state.itineraries.findIndex(contact => {return contact.id == state.selectedItinerary.id})\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index]= action.payload;\n        return {...state, itineraries: newItinerarySet, itineraryChanging:true};\n      }\n      case 'ITINERARY_CHANGED':{\n        return{...state, itineraryChanging:false}\n      }\n      case \"ITINERARY_DELETE\": {\n        const newItineraries = Object.assign([],{...state.itineraries});\n        const index= state.itineraries.findIndex(itinerary => {return itinerary.id == action.id})\n        newItineraries.splice(index, 1)\n        return {...state, itineraries: newItineraries};\n      }\n      default:\n        return state;\n    }\n  }\n  \nexport default itineraryReducer;"]},"metadata":{},"sourceType":"module"}