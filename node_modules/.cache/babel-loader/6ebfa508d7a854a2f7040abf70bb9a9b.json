{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst INITIAL_STATE = {\n  // itineraries: [{}],\n  itinerariesGetting: false,\n  itineraryAdding: false,\n  selectedItinerary: {},\n  selectItinerariesChanged: false,\n  itineraryChanging: false,\n  itineraryHead: {}\n};\n\nfunction itineraryReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'ITINERARIES_GET':\n      {\n        return _objectSpread({}, state, {\n          itineraries: action.payload,\n          itinerariesGetting: true\n        });\n      }\n\n    case \"ITINERARIES_GETTING\":\n      {\n        return _objectSpread({}, state, {\n          itinerariesGetting: false\n        });\n      }\n\n    case 'ITINERARY_ADD':\n      {\n        return _objectSpread({}, state, {\n          itineraries: [action.payload, ...state.itineraries],\n          itineraryAdding: true\n        });\n      }\n\n    case 'ITINERARY_ADDED':\n      {\n        return _objectSpread({}, state, {\n          itineraryAdding: false\n        });\n      }\n\n    case 'ITINERARY_SELECT':\n      {\n        return _objectSpread({}, state, {\n          selectedItinerary: _objectSpread({}, action.payload),\n          itineraryHead: action.itineraryHead,\n          selectItineraryChanged: true\n        });\n      }\n\n    case 'ITINERARY_SELECT_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          selectItineraryChanged: false\n        });\n      }\n\n    case 'EDIT_ITINERARY':\n      {\n        const index = state.itineraries.findIndex(itinerary => {\n          return itinerary.id == state.selectedItinerary.id;\n        });\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index] = action.payload;\n        return _objectSpread({}, state, {\n          itineraries: newItinerarySet,\n          itineraryChanging: true\n        });\n      }\n\n    case \"EDIT_ITINERARY_SCHEDULE\":\n      {\n        const index = state.itineraries.findIndex(itinerary => {\n          return itinerary.id == action.id;\n        });\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index] = action.payload;\n        return _objectSpread({}, state, {\n          itineraries: newItinerarySet,\n          itineraryChanging: true\n        });\n      }\n\n    case 'ITINERARY_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          itineraryChanging: false\n        });\n      }\n\n    case \"ITINERARY_DELETE\":\n      {\n        const newItineraries = Object.assign([], _objectSpread({}, state.itineraries));\n        const index = state.itineraries.findIndex(itinerary => {\n          return itinerary.id == action.id;\n        });\n        newItineraries.splice(index, 1);\n        return _objectSpread({}, state, {\n          itineraries: newItineraries\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default itineraryReducer;","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/reducers/itinerary.js"],"names":["INITIAL_STATE","itinerariesGetting","itineraryAdding","selectedItinerary","selectItinerariesChanged","itineraryChanging","itineraryHead","itineraryReducer","state","action","type","itineraries","payload","selectItineraryChanged","index","findIndex","itinerary","id","newItinerarySet","newItineraries","Object","assign","splice"],"mappings":"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","sourcesContent":["const INITIAL_STATE = {\n    // itineraries: [{}],\n    itinerariesGetting: false,\n    itineraryAdding: false,\n    selectedItinerary: {},\n    selectItinerariesChanged: false,\n    itineraryChanging: false,\n    itineraryHead:{}\n}; \nfunction itineraryReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n      case 'ITINERARIES_GET': {\n        return {...state, itineraries: action.payload, itinerariesGetting: true};\n      }\n      case \"ITINERARIES_GETTING\":{\n        return {...state, itinerariesGetting: false}\n      }\n      case 'ITINERARY_ADD': {\n        return {...state, itineraries: [action.payload,...state.itineraries], itineraryAdding: true};\n      }\n      case 'ITINERARY_ADDED': {\n        return {...state, itineraryAdding: false}\n      }\n      case 'ITINERARY_SELECT': {\n        return {...state, selectedItinerary: {...action.payload}, itineraryHead: action.itineraryHead, selectItineraryChanged: true};\n      }\n      case 'ITINERARY_SELECT_CHANGED':{\n        return {...state, selectItineraryChanged: false}\n      }\n      case 'EDIT_ITINERARY': {\n        const index= state.itineraries.findIndex(itinerary => {return itinerary.id == state.selectedItinerary.id})\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index]= action.payload;\n        return {...state, itineraries: newItinerarySet, itineraryChanging:true};\n      }\n      case \"EDIT_ITINERARY_SCHEDULE\":{\n        const index= state.itineraries.findIndex(itinerary=>{ return itinerary.id == action.id})\n        const newItinerarySet = state.itineraries;\n        newItinerarySet[index] = action.payload;\n        return {...state, itineraries: newItinerarySet, itineraryChanging:true}\n      }\n      case 'ITINERARY_CHANGED':{\n        return{...state, itineraryChanging:false}\n      }\n      case \"ITINERARY_DELETE\": {\n        const newItineraries = Object.assign([],{...state.itineraries});\n        const index= state.itineraries.findIndex(itinerary => {return itinerary.id == action.id})\n        newItineraries.splice(index, 1)\n        return {...state, itineraries: newItineraries};\n      }\n      default:\n        return state;\n    }\n  }\n  \nexport default itineraryReducer;"]},"metadata":{},"sourceType":"module"}