{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nconst INITIAL_STATE = {\n  notifications: [{}],\n  notificationAdding: false,\n  selectedNotification: {},\n  selectNotificationChanged: false,\n  groupChanging: false\n};\n\nfunction notificationReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'NOTIFICATIONS_GET':\n      {\n        return _objectSpread({}, state, {\n          notifications: action.payload\n        });\n      }\n\n    case 'NOTIFICATION_ADD':\n      {\n        return _objectSpread({}, state, {\n          notifications: [action.payload, ...state.notifications],\n          notificationAdding: true\n        });\n      }\n\n    case 'NOTIFICATION_ADDED':\n      {\n        return _objectSpread({}, state, {\n          notificationAdding: false\n        });\n      }\n\n    case 'NOTIFICATION_SELECT':\n      {\n        return _objectSpread({}, state, {\n          selectedNotification: action.payload,\n          selectNotificationChanged: true\n        });\n      }\n\n    case 'NOTIFICATION_SELECT_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          selectNotificationChanged: false\n        });\n      }\n\n    case 'EDIT_NOTIFICATION':\n      {\n        const index = state.notifications.findIndex(notification => {\n          return notification.id == state.selectedNotification.id;\n        });\n        const newNotificationSet = state.notifications;\n        newNotificationSet[index] = action.payload;\n        console.log(newNotificationSet);\n        return _objectSpread({}, state, {\n          notifications: newNotificationSet,\n          notificationChanging: true\n        });\n      }\n\n    case 'NOTIFICATION_CHANGED':\n      {\n        return _objectSpread({}, state, {\n          notificationChanging: false\n        });\n      }\n\n    case \"NOTIFICATION_DELETE\":\n      {\n        const newNotifications = Object.assign([], _objectSpread({}, state.notifications));\n        const index = state.notifications.findIndex(notification => {\n          return notification.id == action.id;\n        });\n        newNotifications.splice(index, 1);\n        return _objectSpread({}, state, {\n          notifications: newNotifications,\n          notificationDeleting: true\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default notificationReducer;","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/reducers/notifications.js"],"names":["INITIAL_STATE","notifications","notificationAdding","selectedNotification","selectNotificationChanged","groupChanging","notificationReducer","state","action","type","payload","index","findIndex","notification","id","newNotificationSet","console","log","notificationChanging","newNotifications","Object","assign","splice","notificationDeleting"],"mappings":";AAAA,MAAMA,aAAa,GAAG;AAClBC,EAAAA,aAAa,EAAE,CAAC,EAAD,CADG;AAElBC,EAAAA,kBAAkB,EAAE,KAFF;AAGlBC,EAAAA,oBAAoB,EAAE,EAHJ;AAIlBC,EAAAA,yBAAyB,EAAE,KAJT;AAKlBC,EAAAA,aAAa,EAAE;AALG,CAAtB;;AAOA,SAASC,mBAAT,CAA6BC,KAAK,GAAGP,aAArC,EAAoDQ,MAApD,EAA4D;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AAA0B;AACxB,iCAAWF,KAAX;AAAkBN,UAAAA,aAAa,EAAEO,MAAM,CAACE;AAAxC;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,iCAAWH,KAAX;AAAkBN,UAAAA,aAAa,EAAE,CAACO,MAAM,CAACE,OAAR,EAAgB,GAAGH,KAAK,CAACN,aAAzB,CAAjC;AAA0EC,UAAAA,kBAAkB,EAAE;AAA9F;AACD;;AACD,SAAK,oBAAL;AAA2B;AACzB,iCAAWK,KAAX;AAAkBL,UAAAA,kBAAkB,EAAE;AAAtC;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,iCAAWK,KAAX;AAAkBJ,UAAAA,oBAAoB,EAAEK,MAAM,CAACE,OAA/C;AAAwDN,UAAAA,yBAAyB,EAAE;AAAnF;AACD;;AACD,SAAK,6BAAL;AAAmC;AACjC,iCAAWG,KAAX;AAAkBH,UAAAA,yBAAyB,EAAE;AAA7C;AACD;;AACD,SAAK,mBAAL;AAA0B;AACxB,cAAMO,KAAK,GAAEJ,KAAK,CAACN,aAAN,CAAoBW,SAApB,CAA8BC,YAAY,IAAI;AAAC,iBAAOA,YAAY,CAACC,EAAb,IAAmBP,KAAK,CAACJ,oBAAN,CAA2BW,EAArD;AAAwD,SAAvG,CAAb;AACA,cAAMC,kBAAkB,GAAGR,KAAK,CAACN,aAAjC;AACAc,QAAAA,kBAAkB,CAACJ,KAAD,CAAlB,GAA2BH,MAAM,CAACE,OAAlC;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACA,iCAAWR,KAAX;AAAkBN,UAAAA,aAAa,EAAEc,kBAAjC;AAAqDG,UAAAA,oBAAoB,EAAC;AAA1E;AACD;;AACD,SAAK,sBAAL;AAA4B;AAC1B,iCAAUX,KAAV;AAAiBW,UAAAA,oBAAoB,EAAC;AAAtC;AACD;;AACD,SAAK,qBAAL;AAA4B;AAC1B,cAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAqBd,KAAK,CAACN,aAA3B,EAAzB;AACA,cAAMU,KAAK,GAAEJ,KAAK,CAACN,aAAN,CAAoBW,SAApB,CAA8BC,YAAY,IAAI;AAAC,iBAAOA,YAAY,CAACC,EAAb,IAAmBN,MAAM,CAACM,EAAjC;AAAoC,SAAnF,CAAb;AACAK,QAAAA,gBAAgB,CAACG,MAAjB,CAAwBX,KAAxB,EAA+B,CAA/B;AACA,iCAAWJ,KAAX;AAAkBN,UAAAA,aAAa,EAAEkB,gBAAjC;AAAmDI,UAAAA,oBAAoB,EAAE;AAAzE;AACD;;AACD;AACE,aAAOhB,KAAP;AAjCJ;AAmCD;;AAEH,eAAeD,mBAAf","sourcesContent":["const INITIAL_STATE = {\n    notifications: [{}],\n    notificationAdding: false,\n    selectedNotification: {},\n    selectNotificationChanged: false,\n    groupChanging: false\n};\nfunction notificationReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n      case 'NOTIFICATIONS_GET': {\n        return {...state, notifications: action.payload};\n      }\n      case 'NOTIFICATION_ADD': {\n        return {...state, notifications: [action.payload,...state.notifications], notificationAdding: true};\n      }\n      case 'NOTIFICATION_ADDED': {\n        return {...state, notificationAdding: false}\n      }\n      case 'NOTIFICATION_SELECT': {\n        return {...state, selectedNotification: action.payload, selectNotificationChanged: true};\n      }\n      case 'NOTIFICATION_SELECT_CHANGED':{\n        return {...state, selectNotificationChanged: false}\n      }\n      case 'EDIT_NOTIFICATION': {\n        const index= state.notifications.findIndex(notification => {return notification.id == state.selectedNotification.id})\n        const newNotificationSet = state.notifications;\n        newNotificationSet[index]= action.payload;\n        console.log(newNotificationSet);\n        return {...state, notifications: newNotificationSet, notificationChanging:true};\n      }\n      case 'NOTIFICATION_CHANGED':{\n        return{...state, notificationChanging:false}\n      }\n      case \"NOTIFICATION_DELETE\": {\n        const newNotifications = Object.assign([],{...state.notifications});\n        const index= state.notifications.findIndex(notification => {return notification.id == action.id})\n        newNotifications.splice(index, 1)\n        return {...state, notifications: newNotifications, notificationDeleting: true};\n      }\n      default:\n        return state;\n    }\n  }\n  \nexport default notificationReducer;"]},"metadata":{},"sourceType":"module"}