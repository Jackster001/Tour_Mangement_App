{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { db, storageRef } from \"../components/Firebase\";\nimport { file } from \"@babel/types\";\n\nconst selectGroup = id => {\n  let groupData = {};\n  let stringId = '' + id + '';\n  console.log(\"selectgroup called\");\n  return dispatch => {\n    let docRef = db.collection(\"groups\").doc(stringId);\n    docRef.get().then(function (doc) {\n      if (doc.exists) {\n        let group = doc.data();\n        groupData = _objectSpread({}, group, {\n          id\n        });\n      } else {\n        console.log(\"Something went wrong!\");\n      }\n\n      dispatch({\n        type: \"GROUP_SELECT\",\n        payload: groupData,\n        id: id\n      });\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n  };\n};\n\nconst selectGroupChanging = () => {\n  return {\n    type: \"GROUP_SELECT_CHANGED\"\n  };\n};\n\nconst selectGroupForModal = id => {\n  let groupData = {};\n  let stringId = '' + id + '';\n  return dispatch => {\n    let docRef = db.collection(\"groups\").doc(stringId);\n    docRef.get().then(function (doc) {\n      if (doc.exists) {\n        let group = doc.data();\n        groupData = _objectSpread({}, group, {\n          id\n        });\n      } else {\n        console.log(\"Something went wrong!\");\n      }\n\n      dispatch({\n        type: \"GROUP_SELECT_FOR_MODAL\",\n        payload: groupData,\n        id: id\n      });\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n  };\n};\n\nconst groupModalSelecting = () => {\n  return {\n    type: \"GROUP_MODAL_SELECTING\"\n  };\n};\n\nconst getGroups = () => {\n  let data = Object.assign([]);\n  return dispatch => {\n    db.collection(\"groups\").get().then(function (querySnapshot) {\n      querySnapshot.forEach(function (doc) {\n        let group = doc.data(); // let GroupLogoUrl= storageRef.child('groupLogos/'+ group.groupLogoName).getDownloadURL()\n\n        group = _objectSpread({\n          id: doc.id\n        }, group);\n        data = [...data, group];\n      });\n      dispatch({\n        type: \"GROUPS_GET\",\n        payload: data\n      });\n    }).catch(function (error) {\n      console.log(\"Error getting document:\", error);\n    });\n  };\n};\n\nconst gettingGroups = () => {\n  return {\n    type: \"GROUP_GETTING\"\n  };\n};\n\nconst addGroup = group => {\n  return dispatch => {\n    storageRef.ref('groupLogos').child(group.GroupLogo.name).put(group.GroupLogo, {\n      contentType: group.GroupLogo.type\n    }).then(() => {\n      storageRef.ref('groupLogos').child(group.GroupLogo.name).getDownloadURL().then(url => {\n        db.collection(\"groups\").add({\n          name: group.GroupName,\n          pin: group.GroupPin,\n          groupLogo: url,\n          startDate: group.startDate,\n          endDate: group.endDate,\n          subGroups: {}\n        }).then(function () {\n          console.log(url);\n\n          let newGroup = _objectSpread({}, group, {\n            groupLogo: url\n          });\n\n          dispatch({\n            type: 'GROUP_ADD',\n            payload: newGroup\n          });\n        }).catch(error => {\n          console.log({\n            error\n          });\n        });\n      }).catch(error => {\n        console.log({\n          error\n        });\n      });\n    }).then(() => {\n      db.collection(\"itineraries\").add({\n        groupName: group.GroupName,\n        groupPin: group.GroupPin,\n        dailyData: []\n      });\n    }).catch(error => {\n      console.log({\n        error\n      });\n    });\n  };\n};\n\nconst groupAdded = () => {\n  return {\n    type: 'GROUP_ADDED'\n  };\n};\n\nconst deleteGroup = id => {\n  db.collection(\"groups\").doc(id).delete().then(function () {\n    console.log(\"Group successfully deleted!\");\n  }).catch(function (error) {\n    console.error(\"Error removing document: \", error);\n  });\n  return {\n    type: \"GROUP_DELETE\",\n    id: id\n  };\n};\n\nconst editGroup = (group, logoChanged) => {\n  return dispatch => {\n    if (logoChanged) {\n      storageRef.ref('groupLogos').child(group.groupLogo.name).put(group.groupLogo, {\n        contentType: group.groupLogo.type\n      }).then(() => {\n        storageRef.ref('groupLogos').child(group.groupLogo.name).getDownloadURL().then(url => {\n          db.collection(\"groups\").doc(group.id).set({\n            name: group.name,\n            pin: group.pin,\n            groupLogo: url\n          }).then(function () {\n            let newGroup = _objectSpread({}, group, {\n              groupLogo: url\n            });\n\n            console.log(newGroup);\n            dispatch({\n              type: 'EDIT_GROUP',\n              payload: newGroup\n            });\n          }).catch(error => {\n            console.log({\n              error\n            });\n          });\n        }).catch(error => {\n          console.log({\n            error\n          });\n        });\n      }).catch(error => {\n        console.log({\n          error\n        });\n      });\n    } else {\n      db.collection(\"groups\").doc(group.id).set(group).then(function () {\n        dispatch({\n          type: \"EDIT_GROUP\",\n          payload: group\n        });\n      }).catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n    }\n  };\n};\n\nconst groupChanged = () => {\n  return {\n    type: \"GROUP_CHANGED\"\n  };\n};\n\nexport { getGroups, gettingGroups, addGroup, groupAdded, deleteGroup, selectGroup, selectGroupChanging, editGroup, groupChanged, selectGroupForModal, groupModalSelecting };","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/Action/groupAction.js"],"names":["db","storageRef","file","selectGroup","id","groupData","stringId","console","log","dispatch","docRef","collection","doc","get","then","exists","group","data","type","payload","catch","error","selectGroupChanging","selectGroupForModal","groupModalSelecting","getGroups","Object","assign","querySnapshot","forEach","gettingGroups","addGroup","ref","child","GroupLogo","name","put","contentType","getDownloadURL","url","add","GroupName","pin","GroupPin","groupLogo","startDate","endDate","subGroups","newGroup","groupName","groupPin","dailyData","groupAdded","deleteGroup","delete","editGroup","logoChanged","set","groupChanged"],"mappings":";AAAA,SAAQA,EAAR,EAAYC,UAAZ,QAA6B,wBAA7B;AACA,SAASC,IAAT,QAAqB,cAArB;;AAEA,MAAMC,WAAW,GAAGC,EAAD,IAAM;AACrB,MAAIC,SAAS,GAAC,EAAd;AACA,MAAIC,QAAQ,GAAC,KAAGF,EAAH,GAAM,EAAnB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,SAAQC,QAAD,IAAY;AACf,QAAIC,MAAM,GAACV,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BN,QAA5B,CAAX;AACAI,IAAAA,MAAM,CAACG,GAAP,GAAaC,IAAb,CAAkB,UAASF,GAAT,EAAa;AAC/B,UAAGA,GAAG,CAACG,MAAP,EAAc;AACV,YAAIC,KAAK,GAACJ,GAAG,CAACK,IAAJ,EAAV;AACAZ,QAAAA,SAAS,qBAAKW,KAAL;AAAYZ,UAAAA;AAAZ,UAAT;AACH,OAHD,MAGM;AACFG,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;;AACDC,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAE,cADD;AAELC,QAAAA,OAAO,EAAEd,SAFJ;AAGLD,QAAAA,EAAE,EAAEA;AAHC,OAAD,CAAR;AAKH,KAZG,EAYDgB,KAZC,CAYK,UAASC,KAAT,EAAgB;AACrBd,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCa,KAAvC;AACH,KAdG;AAeH,GAjBD;AAkBH,CAtBD;;AAuBA,MAAMC,mBAAmB,GAAC,MAAI;AAC1B,SAAM;AACFJ,IAAAA,IAAI,EAAC;AADH,GAAN;AAGH,CAJD;;AAKA,MAAMK,mBAAmB,GAAGnB,EAAD,IAAM;AAC7B,MAAIC,SAAS,GAAC,EAAd;AACA,MAAIC,QAAQ,GAAC,KAAGF,EAAH,GAAM,EAAnB;AACA,SAAQK,QAAD,IAAY;AACf,QAAIC,MAAM,GAACV,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BN,QAA5B,CAAX;AACAI,IAAAA,MAAM,CAACG,GAAP,GAAaC,IAAb,CAAkB,UAASF,GAAT,EAAa;AAC/B,UAAGA,GAAG,CAACG,MAAP,EAAc;AACV,YAAIC,KAAK,GAACJ,GAAG,CAACK,IAAJ,EAAV;AACAZ,QAAAA,SAAS,qBAAKW,KAAL;AAAYZ,UAAAA;AAAZ,UAAT;AACH,OAHD,MAGM;AACFG,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;;AACDC,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAE,wBADD;AAELC,QAAAA,OAAO,EAAEd,SAFJ;AAGLD,QAAAA,EAAE,EAAEA;AAHC,OAAD,CAAR;AAKH,KAZG,EAYDgB,KAZC,CAYK,UAASC,KAAT,EAAgB;AACrBd,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCa,KAAvC;AACH,KAdG;AAeH,GAjBD;AAkBH,CArBD;;AAsBA,MAAMG,mBAAmB,GAAG,MAAK;AAC7B,SAAM;AACFN,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJD;;AAKA,MAAMO,SAAS,GAAG,MAAK;AACnB,MAAIR,IAAI,GAACS,MAAM,CAACC,MAAP,CAAc,EAAd,CAAT;AACA,SAAQlB,QAAD,IAAc;AACjBT,IAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBE,GAAxB,GAA8BC,IAA9B,CAAmC,UAASc,aAAT,EAAwB;AACvDA,MAAAA,aAAa,CAACC,OAAd,CAAsB,UAASjB,GAAT,EAAc;AACpC,YAAII,KAAK,GAAGJ,GAAG,CAACK,IAAJ,EAAZ,CADoC,CAEpC;;AACAD,QAAAA,KAAK;AAAGZ,UAAAA,EAAE,EAACQ,GAAG,CAACR;AAAV,WAAgBY,KAAhB,CAAL;AACAC,QAAAA,IAAI,GAAC,CAAC,GAAGA,IAAJ,EAAUD,KAAV,CAAL;AACC,OALD;AAMAP,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAE,YADD;AAELC,QAAAA,OAAO,EAAEF;AAFJ,OAAD,CAAR;AAIF,KAXF,EAYEG,KAZF,CAYQ,UAASC,KAAT,EAAe;AACnBd,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCa,KAAvC;AACF,KAdF;AAeH,GAhBD;AAiBH,CAnBD;;AAoBA,MAAMS,aAAa,GAAG,MAAK;AACvB,SAAM;AACFZ,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJD;;AAKA,MAAMa,QAAQ,GAAIf,KAAD,IAAS;AACtB,SAAQP,QAAD,IAAY;AACfR,IAAAA,UAAU,CAAC+B,GAAX,CAAe,YAAf,EAA6BC,KAA7B,CAAmCjB,KAAK,CAACkB,SAAN,CAAgBC,IAAnD,EACCC,GADD,CACKpB,KAAK,CAACkB,SADX,EACqB;AAACG,MAAAA,WAAW,EAACrB,KAAK,CAACkB,SAAN,CAAgBhB;AAA7B,KADrB,EAECJ,IAFD,CAEM,MAAI;AACNb,MAAAA,UAAU,CAAC+B,GAAX,CAAe,YAAf,EAA6BC,KAA7B,CAAmCjB,KAAK,CAACkB,SAAN,CAAgBC,IAAnD,EAAyDG,cAAzD,GAA0ExB,IAA1E,CAA+EyB,GAAG,IAAE;AAChFvC,QAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwB6B,GAAxB,CAA4B;AACxBL,UAAAA,IAAI,EAAEnB,KAAK,CAACyB,SADY;AAExBC,UAAAA,GAAG,EAAE1B,KAAK,CAAC2B,QAFa;AAGxBC,UAAAA,SAAS,EAACL,GAHc;AAIxBM,UAAAA,SAAS,EAAE7B,KAAK,CAAC6B,SAJO;AAKxBC,UAAAA,OAAO,EAAE9B,KAAK,CAAC8B,OALS;AAMxBC,UAAAA,SAAS,EAAE;AANa,SAA5B,EAOGjC,IAPH,CAOQ,YAAU;AACdP,UAAAA,OAAO,CAACC,GAAR,CAAY+B,GAAZ;;AACA,cAAIS,QAAQ,qBAAKhC,KAAL;AAAY4B,YAAAA,SAAS,EAACL;AAAtB,YAAZ;;AACI9B,UAAAA,QAAQ,CAAC;AAACS,YAAAA,IAAI,EAAE,WAAP;AACTC,YAAAA,OAAO,EAAE6B;AADA,WAAD,CAAR;AAEP,SAZD,EAYG5B,KAZH,CAYSC,KAAK,IAAI;AACdd,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,YAAAA;AAAF,WAAZ;AACH,SAdD;AAeH,OAhBD,EAgBGD,KAhBH,CAgBSC,KAAK,IAAI;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,UAAAA;AAAF,SAAZ;AACH,OAlBD;AAmBH,KAtBD,EAsBGP,IAtBH,CAsBQ,MAAI;AACRd,MAAAA,EAAE,CAACW,UAAH,CAAc,aAAd,EAA6B6B,GAA7B,CAAiC;AAC7BS,QAAAA,SAAS,EAAEjC,KAAK,CAACyB,SADY;AAE7BS,QAAAA,QAAQ,EAAElC,KAAK,CAAC2B,QAFa;AAG7BQ,QAAAA,SAAS,EAAC;AAHmB,OAAjC;AAKH,KA5BD,EA4BG/B,KA5BH,CA4BSC,KAAK,IAAI;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,QAAAA;AAAF,OAAZ;AACP,KA9BG;AA8BD,GA/BH;AAgCH,CAjCD;;AAkCA,MAAM+B,UAAU,GAAC,MAAI;AACjB,SAAO;AACHlC,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJD;;AAKA,MAAMmC,WAAW,GAAIjD,EAAD,IAAO;AACvBJ,EAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BR,EAA5B,EAAgCkD,MAAhC,GAAyCxC,IAAzC,CAA8C,YAAU;AACpDP,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,GAFD,EAEGY,KAFH,CAES,UAASC,KAAT,EAAgB;AACrBd,IAAAA,OAAO,CAACc,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACH,GAJD;AAKA,SAAM;AACFH,IAAAA,IAAI,EAAE,cADJ;AAEFd,IAAAA,EAAE,EAAEA;AAFF,GAAN;AAIH,CAVD;;AAWA,MAAMmD,SAAS,GAAG,CAACvC,KAAD,EAAQwC,WAAR,KAAuB;AACrC,SAAO/C,QAAD,IAAY;AACd,QAAG+C,WAAH,EAAe;AACXvD,MAAAA,UAAU,CAAC+B,GAAX,CAAe,YAAf,EAA6BC,KAA7B,CAAmCjB,KAAK,CAAC4B,SAAN,CAAgBT,IAAnD,EACCC,GADD,CACKpB,KAAK,CAAC4B,SADX,EACqB;AAACP,QAAAA,WAAW,EAACrB,KAAK,CAAC4B,SAAN,CAAgB1B;AAA7B,OADrB,EAECJ,IAFD,CAEM,MAAI;AACVb,QAAAA,UAAU,CAAC+B,GAAX,CAAe,YAAf,EAA6BC,KAA7B,CAAmCjB,KAAK,CAAC4B,SAAN,CAAgBT,IAAnD,EAAyDG,cAAzD,GAA0ExB,IAA1E,CAA+EyB,GAAG,IAAE;AAChFvC,UAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BI,KAAK,CAACZ,EAAlC,EAAsCqD,GAAtC,CAA0C;AACtCtB,YAAAA,IAAI,EAAEnB,KAAK,CAACmB,IAD0B;AAEtCO,YAAAA,GAAG,EAAE1B,KAAK,CAAC0B,GAF2B;AAGtCE,YAAAA,SAAS,EAACL;AAH4B,WAA1C,EAIGzB,IAJH,CAIQ,YAAU;AACd,gBAAIkC,QAAQ,qBAAKhC,KAAL;AAAY4B,cAAAA,SAAS,EAACL;AAAtB,cAAZ;;AACAhC,YAAAA,OAAO,CAACC,GAAR,CAAYwC,QAAZ;AACAvC,YAAAA,QAAQ,CAAC;AAACS,cAAAA,IAAI,EAAE,YAAP;AACTC,cAAAA,OAAO,EAAE6B;AADA,aAAD,CAAR;AAEH,WATD,EASG5B,KATH,CASSC,KAAK,IAAI;AACdd,YAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,cAAAA;AAAF,aAAZ;AACH,WAXD;AAYH,SAbD,EAaGD,KAbH,CAaSC,KAAK,IAAI;AACdd,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,YAAAA;AAAF,WAAZ;AACH,SAfD;AAgBH,OAnBG,EAmBDD,KAnBC,CAmBKC,KAAK,IAAI;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEa,UAAAA;AAAF,SAAZ;AACH,OArBG;AAsBH,KAvBD,MAwBI;AACArB,MAAAA,EAAE,CAACW,UAAH,CAAc,QAAd,EAAwBC,GAAxB,CAA4BI,KAAK,CAACZ,EAAlC,EAAsCqD,GAAtC,CAA0CzC,KAA1C,EAAiDF,IAAjD,CAAsD,YAAW;AACjEL,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAC,YADA;AAELC,UAAAA,OAAO,EAAEH;AAFJ,SAAD,CAAR;AAIC,OALD,EAMCI,KAND,CAMO,UAASC,KAAT,EAAgB;AACnBd,QAAAA,OAAO,CAACc,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,OARD;AASH;AAEJ,GArCD;AAsCH,CAvCD;;AAwCA,MAAMqC,YAAY,GAAC,MAAI;AACnB,SAAM;AACFxC,IAAAA,IAAI,EAAE;AADJ,GAAN;AAGH,CAJD;;AAKA,SAAQO,SAAR,EAAkBK,aAAlB,EAAiCC,QAAjC,EAA2CqB,UAA3C,EAAuDC,WAAvD,EAAoElD,WAApE,EAAiFmB,mBAAjF,EAAsGiC,SAAtG,EAAiHG,YAAjH,EAA+HnC,mBAA/H,EAAoJC,mBAApJ","sourcesContent":["import {db, storageRef} from \"../components/Firebase\";\nimport { file } from \"@babel/types\";\n\nconst selectGroup= (id)=>{\n    let groupData={}\n    let stringId=''+id+'';\n    console.log(\"selectgroup called\")\n    return (dispatch)=>{\n        let docRef=db.collection(\"groups\").doc(stringId)\n        docRef.get().then(function(doc){\n        if(doc.exists){\n            let group=doc.data();\n            groupData={...group, id}\n        } else{\n            console.log(\"Something went wrong!\")\n        }\n        dispatch({\n            type: \"GROUP_SELECT\",\n            payload: groupData,\n            id: id\n        })\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n    }\n}\nconst selectGroupChanging=()=>{\n    return{\n        type:\"GROUP_SELECT_CHANGED\"\n    }\n}\nconst selectGroupForModal= (id)=>{\n    let groupData={}\n    let stringId=''+id+'';\n    return (dispatch)=>{\n        let docRef=db.collection(\"groups\").doc(stringId)\n        docRef.get().then(function(doc){\n        if(doc.exists){\n            let group=doc.data();\n            groupData={...group, id}\n        } else{\n            console.log(\"Something went wrong!\")\n        }\n        dispatch({\n            type: \"GROUP_SELECT_FOR_MODAL\",\n            payload: groupData,\n            id: id\n        })\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    });\n    }\n}\nconst groupModalSelecting = () =>{\n    return{\n        type: \"GROUP_MODAL_SELECTING\"\n    }\n}\nconst getGroups = () =>{\n    let data=Object.assign([])\n    return (dispatch) => {\n        db.collection(\"groups\").get().then(function(querySnapshot) {\n            querySnapshot.forEach(function(doc) {\n            let group = doc.data();\n            // let GroupLogoUrl= storageRef.child('groupLogos/'+ group.groupLogoName).getDownloadURL()\n            group= {id:doc.id,...group}\n            data=[...data, group]\n            })           \n            dispatch({\n                type: \"GROUPS_GET\",\n                payload: data\n            })\n         })\n         .catch(function(error){\n            console.log(\"Error getting document:\", error);\n         })\n    }\n}\nconst gettingGroups = () =>{\n    return{\n        type: \"GROUP_GETTING\"\n    }\n}\nconst addGroup = (group)=>{\n    return (dispatch)=>{\n        storageRef.ref('groupLogos').child(group.GroupLogo.name)\n        .put(group.GroupLogo,{contentType:group.GroupLogo.type})\n        .then(()=>{\n            storageRef.ref('groupLogos').child(group.GroupLogo.name).getDownloadURL().then(url=>{\n                db.collection(\"groups\").add({\n                    name: group.GroupName,\n                    pin: group.GroupPin,\n                    groupLogo:url,\n                    startDate: group.startDate,\n                    endDate: group.endDate,\n                    subGroups: {}\n                }).then(function(){\n                    console.log(url);\n                    let newGroup={...group, groupLogo:url}\n                        dispatch({type: 'GROUP_ADD',\n                        payload: newGroup})\n                }).catch(error => {\n                    console.log({ error });\n                });\n            }).catch(error => {\n                console.log({ error });\n            })\n        }).then(()=>{\n            db.collection(\"itineraries\").add({\n                groupName: group.GroupName,\n                groupPin: group.GroupPin,\n                dailyData:[]\n            })\n        }).catch(error => {\n            console.log({ error });\n    })}\n}\nconst groupAdded=()=>{\n    return {\n        type: 'GROUP_ADDED'\n    }\n}\nconst deleteGroup = (id) =>{\n    db.collection(\"groups\").doc(id).delete().then(function(){\n        console.log(\"Group successfully deleted!\");\n    }).catch(function(error) {\n        console.error(\"Error removing document: \", error);\n    });\n    return{\n        type: \"GROUP_DELETE\",\n        id: id\n    }\n}\nconst editGroup = (group, logoChanged) =>{\n    return(dispatch)=>{\n        if(logoChanged){\n            storageRef.ref('groupLogos').child(group.groupLogo.name)\n            .put(group.groupLogo,{contentType:group.groupLogo.type})\n            .then(()=>{\n            storageRef.ref('groupLogos').child(group.groupLogo.name).getDownloadURL().then(url=>{\n                db.collection(\"groups\").doc(group.id).set({\n                    name: group.name,\n                    pin: group.pin,\n                    groupLogo:url\n                }).then(function(){\n                    let newGroup={...group, groupLogo:url}\n                    console.log(newGroup)\n                    dispatch({type: 'EDIT_GROUP',\n                    payload: newGroup})\n                }).catch(error => {\n                    console.log({ error });\n                });\n            }).catch(error => {\n                console.log({ error });\n            })\n        }).catch(error => {\n            console.log({ error });\n        })\n        }\n        else{\n            db.collection(\"groups\").doc(group.id).set(group).then(function() {\n            dispatch({\n                type:\"EDIT_GROUP\",\n                payload: group\n            })\n            })\n            .catch(function(error) {\n                console.error(\"Error writing document: \", error);\n            });\n        }\n       \n    } \n}\nconst groupChanged=()=>{\n    return{\n        type: \"GROUP_CHANGED\"\n    }\n}\nexport {getGroups,gettingGroups, addGroup, groupAdded, deleteGroup, selectGroup, selectGroupChanging, editGroup, groupChanged, selectGroupForModal, groupModalSelecting}"]},"metadata":{},"sourceType":"module"}