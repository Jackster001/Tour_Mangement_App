{"ast":null,"code":"import _objectSpread from \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Tables/itineraryTable/itineraryTable.js\";\nimport React from 'react';\nimport '../../components.css';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { withAuthorization } from '../../Session';\nimport ItineraryRow from \"./itineraryRow\";\nimport { getItineraries, addItineraryDay, itineraryChanged, selectItinerary } from '../../../Action/itineraryAction';\n\nclass ItineraryTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItinerary: {},\n      dailyData: [],\n      id: \"\",\n      date: new Date(),\n      dateSelected: false,\n      groupSelected: false\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.props.itineraryChanging) {\n      this.props.itineraryChanged();\n      window.location.reload();\n    }\n  }\n\n  onChangeDate(event) {\n    let utcDate = new Date(event.target.value);\n    utcDate.setMonth(utcDate.getMonth());\n    utcDate = new Date(utcDate.getTime() + utcDate.getTimezoneOffset() * 60000);\n    this.setState(_objectSpread({}, this.state, {\n      date: utcDate,\n      dateSelected: true\n    }));\n  }\n\n  onChangeGroupName(event) {\n    const selectedGroup = this.props.groups.find(group => {\n      return group.name == event.target.value;\n    });\n    const groupName = selectedGroup.name;\n    const groupPin = selectedGroup.pin;\n    let selectedItinerary = this.props.itineraries.find(itinerary => {\n      return itinerary.groupName == groupName && itinerary.groupPin == groupPin;\n    });\n    let days = [];\n    let id = '';\n\n    if (selectedItinerary) {\n      days = selectedItinerary.dailyData.map(day => {\n        let obj = Object.assign({}, day);\n        return obj;\n      });\n      id = selectedItinerary.id;\n    } else {\n      let dailyData = [];\n      days = dailyData;\n    }\n\n    this.setState(_objectSpread({}, this.state, {\n      dailyData: days,\n      selectedItinerary: selectedItinerary,\n      id: id,\n      groupSelected: true\n    }));\n  }\n\n  onAddSchedule() {\n    if (!this.state.dateSelected || !this.state.groupSelected) {\n      return alert(\"Please select group and date\");\n    }\n\n    let date = this.state.date;\n    let month = date.getMonth() + 1;\n    let day = date.getDate();\n    let year = date.getFullYear();\n    let setDate = month + \"/\" + day + \"/\" + year;\n    let dailyData = this.state.selectedItinerary.dailyData;\n\n    for (let i = 0; i < dailyData.length; i++) {\n      let compareDate = new Date(dailyData[i].date.seconds * 1000);\n      let compareMonth = compareDate.getMonth() + 1;\n      let compareDay = compareDate.getDate();\n      let compareYear = compareDate.getFullYear();\n      let compareSetDate = compareMonth + \"/\" + compareDay + \"/\" + compareYear;\n\n      if (setDate === compareSetDate) {\n        return alert(\"Schedule for date has already been set. Choose a different date!\");\n      }\n    }\n\n    let id = this.state.id;\n    let arrDailyData = [];\n\n    for (let i = 0; i < dailyData.length; i++) {\n      arrDailyData.push(dailyData[i]);\n    }\n\n    for (let i = 0; i < dailyData.length; i++) {\n      if (date - new Date(dailyData[i].date.seconds * 1000) < 0) {\n        let day = {\n          activities: {},\n          date: date,\n          length: 0\n        };\n        arrDailyData.splice(i, 0, day);\n        i = dailyData.length;\n      }\n\n      if (i == dailyData.length - 1) {\n        let day = {\n          activities: {},\n          date: date,\n          length: 0\n        };\n        arrDailyData.push(day);\n      }\n    }\n\n    if (arrDailyData.length < 1) {\n      let day = {\n        activities: {},\n        date: date,\n        length: 0\n      };\n      arrDailyData.push(day);\n    }\n\n    this.props.addItineraryDay(arrDailyData, id);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"basicTable\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"filterBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      id: \"group_name\",\n      name: \"group_name\",\n      onChange: this.onChangeGroupName.bind(this),\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      disabled: true,\n      selected: true,\n      defaultValue: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Group\"), this.props.groups.map(function (group, i) {\n      return React.createElement(\"option\", {\n        value: group.name,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, group.name);\n    })), React.createElement(\"input\", {\n      className: \"dateInput\",\n      type: \"date\",\n      onChange: this.onChangeDate.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"itineraryButton\",\n      onClick: () => this.onAddSchedule(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Add New Schedule\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      className: \"table1 table-dark\",\n      border: \"1\",\n      cellSpacing: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      className: \"TableHead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Group\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Schedule\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Edit\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.dailyData.map((day, i) => {\n      let timeObject = Object.assign({}, day.date);\n      let date = new Date(timeObject.seconds * 1000);\n      let timestamp = date.toLocaleDateString('en-US', {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      return React.createElement(ItineraryRow, {\n        index: i,\n        groupName: this.state.selectedItinerary.groupName,\n        id: this.state.id,\n        date: timestamp,\n        scheduleDate: date,\n        activities: day.activities,\n        length: day.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    }))));\n  }\n\n}\n\nconst condition = authUser => !!authUser;\n\nconst mapStateToProps = state => ({\n  groups: state.groupState.groups,\n  itineraries: state.itineraryState.itineraries,\n  itineraryChanging: state.itineraryState.itineraryChanging\n});\n\nexport default compose(connect(mapStateToProps, {\n  getItineraries,\n  addItineraryDay,\n  itineraryChanged\n}), withAuthorization(condition))(ItineraryTable);","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Tour_Mangement_App/src/components/Tables/itineraryTable/itineraryTable.js"],"names":["React","connect","compose","withAuthorization","ItineraryRow","getItineraries","addItineraryDay","itineraryChanged","selectItinerary","ItineraryTable","Component","constructor","props","state","selectedItinerary","dailyData","id","date","Date","dateSelected","groupSelected","componentDidUpdate","itineraryChanging","window","location","reload","onChangeDate","event","utcDate","target","value","setMonth","getMonth","getTime","getTimezoneOffset","setState","onChangeGroupName","selectedGroup","groups","find","group","name","groupName","groupPin","pin","itineraries","itinerary","days","map","day","obj","Object","assign","onAddSchedule","alert","month","getDate","year","getFullYear","setDate","i","length","compareDate","seconds","compareMonth","compareDay","compareYear","compareSetDate","arrDailyData","push","activities","splice","render","bind","timeObject","timestamp","toLocaleDateString","weekday","condition","authUser","mapStateToProps","groupState","itineraryState"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../components.css';\nimport { connect } from 'react-redux';\nimport { compose } from 'recompose';\nimport { withAuthorization } from '../../Session';\nimport ItineraryRow from \"./itineraryRow\";\nimport {getItineraries, addItineraryDay, itineraryChanged, selectItinerary} from '../../../Action/itineraryAction';\nclass ItineraryTable extends React.Component {\n    constructor(props){\n        super(props)\n        this.state={\n          selectedItinerary: {},\n          dailyData:[],\n          id: \"\",\n          date: new Date(),\n          dateSelected: false,\n          groupSelected: false\n        }\n    }\n    componentDidUpdate(){\n      if(this.props.itineraryChanging){\n        this.props.itineraryChanged();\n        window.location.reload();\n      }\n    }\n    onChangeDate(event){\n      let utcDate= new Date(event.target.value)\n      utcDate.setMonth(utcDate.getMonth())\n      utcDate = new Date(utcDate.getTime() + utcDate.getTimezoneOffset() * 60000)\n      this.setState({...this.state,date: utcDate, dateSelected: true})\n    }\n    onChangeGroupName (event){\n      const selectedGroup = this.props.groups.find(group =>{\n        return group.name == event.target.value\n      })\n      const groupName = selectedGroup.name;\n      const groupPin = selectedGroup.pin;\n      let selectedItinerary = this.props.itineraries.find(itinerary =>{\n        return itinerary.groupName == groupName && itinerary.groupPin == groupPin\n      })\n      let days= []\n      let id=''\n      if(selectedItinerary){\n        days = selectedItinerary.dailyData.map( day =>{\n        let obj=Object.assign({}, day)\n        return obj\n        })\n        id= selectedItinerary.id;\n      }\n      else{\n        let dailyData = []\n        days = dailyData\n      }\n      this.setState({...this.state, dailyData: days, selectedItinerary: selectedItinerary, id: id, groupSelected:true})\n    }\n    onAddSchedule(){\n      if(!this.state.dateSelected || !this.state.groupSelected){\n        return alert(\"Please select group and date\")\n      }\n      let date = this.state.date;\n      let month = date.getMonth()+1;\n      let day= date.getDate();\n      let year =date.getFullYear();\n      let setDate=month+\"/\"+day+\"/\"+year\n      let dailyData= this.state.selectedItinerary.dailyData\n      for(let i=0; i < dailyData.length; i++){\n        let compareDate= new Date(dailyData[i].date.seconds*1000)\n        let compareMonth = compareDate.getMonth()+1;\n        let compareDay= compareDate.getDate();\n        let compareYear =compareDate.getFullYear();\n        let compareSetDate = compareMonth+\"/\"+compareDay+\"/\"+compareYear\n        if(setDate === compareSetDate){\n          return alert(\"Schedule for date has already been set. Choose a different date!\")\n        }\n      }\n      let id = this.state.id\n      let arrDailyData=[]\n      for(let i=0; i<dailyData.length;i++){\n        arrDailyData.push(dailyData[i])\n      }     \n      for(let i=0; i<dailyData.length;i++){\n        if(date-new Date(dailyData[i].date.seconds*1000)<0){\n          let day= {\n            activities:{},\n            date: date,\n            length:0\n          }\n          arrDailyData.splice(i,0,day);\n          i=dailyData.length\n        }\n        if(i==dailyData.length-1){\n          let day= {\n            activities:{},\n            date: date,\n            length:0\n          }\n          arrDailyData.push(day);\n        }\n      }   \n      if(arrDailyData.length<1){\n        let day= {\n          activities:{},\n          date: date,\n          length:0\n        }\n        arrDailyData.push(day)\n      }\n      this.props.addItineraryDay(arrDailyData, id)\n    }\n    render() {\n      return (\n         <div className=\"basicTable\">\n            <div className=\"filterBox\">\n                <select id=\"group_name\" name=\"group_name\" onChange={this.onChangeGroupName.bind(this)} required>\n                <option disabled selected defaultValue>Group</option>\n                    {this.props.groups.map(function(group,i){\n                        return (<option value={group.name} key={i}>{group.name}</option>)\n                })}\n                </select>\n                <input className=\"dateInput\" type=\"date\" onChange={this.onChangeDate.bind(this)}/>\n                <button className=\"itineraryButton\" onClick={()=>this.onAddSchedule()}>Add New Schedule</button>\n            </div>\n            <br/><br/>\n            <table className=\"table1 table-dark\" border=\"1\" cellSpacing=\"0\">\n             <thead className=\"TableHead\">\n               <tr>\n                <th>Group</th>\n                <th>Date</th>\n                <th>Schedule</th>\n                <th>Edit</th>\n               </tr>\n             </thead>\n            <tbody>\n              {this.state.dailyData.map((day, i)=>{\n                let timeObject = Object.assign({},day.date);\n                let date= new Date(timeObject.seconds*1000);\n                let timestamp= date.toLocaleDateString('en-US', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'})\n                return <ItineraryRow \n                  index={i}\n                  groupName= {this.state.selectedItinerary.groupName}\n                  id= {this.state.id}\n                  date= {timestamp}\n                  scheduleDate={date}\n                  activities ={day.activities}\n                  length={day.length}\n                />\n              })}\n              </tbody>\n            </table>\n         </div>\n      );\n   }\n}\n\nconst condition = authUser => !!authUser;\n\nconst mapStateToProps = state => ({\n  groups: state.groupState.groups,\n  itineraries: state.itineraryState.itineraries,\n  itineraryChanging: state.itineraryState.itineraryChanging\n});\n \nexport default compose(\n   connect(\n     mapStateToProps,\n     {getItineraries, addItineraryDay, itineraryChanged}\n   ),withAuthorization(condition)\n)(ItineraryTable);"]},"metadata":{},"sourceType":"module"}